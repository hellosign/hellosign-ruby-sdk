=begin
#HelloSign API

#HelloSign v3 API

The version of the OpenAPI document: 3.0.0
Contact: apisupport@hellosign.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'cgi'

module HelloSign
  class BulkSendJobApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Bulk Send Job
    # Returns the status of the BulkSendJob and its SignatureRequests specified by the `bulk_send_job_id` parameter.
    # @param bulk_send_job_id [String] The id of the BulkSendJob to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [BulkSendJobGetResponse]
    def bulk_send_job_get(bulk_send_job_id, opts = {})
      data, _status_code, _headers = bulk_send_job_get_with_http_info(bulk_send_job_id, opts)
      data
    end

    # Get Bulk Send Job
    # Returns the status of the BulkSendJob and its SignatureRequests specified by the &#x60;bulk_send_job_id&#x60; parameter.
    # @param bulk_send_job_id [String] The id of the BulkSendJob to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BulkSendJobGetResponse, Integer, Hash)>] BulkSendJobGetResponse data, response status code and response headers
    def bulk_send_job_get_with_http_info(bulk_send_job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkSendJobApi.bulk_send_job_get ...'
      end
      # verify the required parameter 'bulk_send_job_id' is set
      if @api_client.config.client_side_validation && bulk_send_job_id.nil?
        fail ArgumentError, "Missing the required parameter 'bulk_send_job_id' when calling BulkSendJobApi.bulk_send_job_get"
      end
      # resource path
      local_var_path = '/bulk_send_job/{bulk_send_job_id}'.sub('{' + 'bulk_send_job_id' + '}', CGI.escape(bulk_send_job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      post_body = {}
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BulkSendJobGetResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"BulkSendJobApi.bulk_send_job_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      begin
        data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      rescue HelloSign::ApiError => e
        if e.code === 200
          body = @api_client.convert_to_type(
            JSON.parse("[#{e.response_body}]", :symbolize_names => true)[0],
            "HelloSign::BulkSendJobGetResponse"
          )

          fail ApiError.new(:code => e.code,
                            :response_headers => e.response_headers,
                            :response_body => body),
               e.message
        end

        range_code = "4XX".split('').first
        range_code_left = "#{range_code}00".to_i
        range_code_right = "#{range_code}99".to_i
        if e.code >= range_code_left && e.code <= range_code_right
          body = @api_client.convert_to_type(
            JSON.parse("[#{e.response_body}]", :symbolize_names => true)[0],
            "HelloSign::ErrorResponse"
          )

          fail ApiError.new(:code => e.code,
                            :response_headers => e.response_headers,
                            :response_body => body),
               e.message
        end

      end

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkSendJobApi#bulk_send_job_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Bulk Send Jobs
    # Returns a list of BulkSendJob that you can access.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Which page number of the BulkSendJob List to return. Defaults to &#x60;1&#x60;. (default to 1)
    # @option opts [Integer] :page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is 20. (default to 20)
    # @return [BulkSendJobListResponse]
    def bulk_send_job_list(opts = {})
      data, _status_code, _headers = bulk_send_job_list_with_http_info(opts)
      data
    end

    # List Bulk Send Jobs
    # Returns a list of BulkSendJob that you can access.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Which page number of the BulkSendJob List to return. Defaults to &#x60;1&#x60;.
    # @option opts [Integer] :page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is 20.
    # @return [Array<(BulkSendJobListResponse, Integer, Hash)>] BulkSendJobListResponse data, response status code and response headers
    def bulk_send_job_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BulkSendJobApi.bulk_send_job_list ...'
      end
      # resource path
      local_var_path = '/bulk_send_job/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      post_body = {}
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BulkSendJobListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key', 'oauth2']

      new_options = opts.merge(
        :operation => :"BulkSendJobApi.bulk_send_job_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      begin
        data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      rescue HelloSign::ApiError => e
        if e.code === 200
          body = @api_client.convert_to_type(
            JSON.parse("[#{e.response_body}]", :symbolize_names => true)[0],
            "HelloSign::BulkSendJobListResponse"
          )

          fail ApiError.new(:code => e.code,
                            :response_headers => e.response_headers,
                            :response_body => body),
               e.message
        end

        range_code = "4XX".split('').first
        range_code_left = "#{range_code}00".to_i
        range_code_right = "#{range_code}99".to_i
        if e.code >= range_code_left && e.code <= range_code_right
          body = @api_client.convert_to_type(
            JSON.parse("[#{e.response_body}]", :symbolize_names => true)[0],
            "HelloSign::ErrorResponse"
          )

          fail ApiError.new(:code => e.code,
                            :response_headers => e.response_headers,
                            :response_body => body),
               e.message
        end

      end

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BulkSendJobApi#bulk_send_job_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
